-- Q1. Display all columns for all transactions.
-- Expected output: All columns
SELECT
  *
FROM
  PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET;
  
--Q2. Display only the Transaction ID, Date, and Customer ID for all records.
--Expected output: Transaction ID, Date, Customer ID
SELECT Transaction_ID, Date, Customer_ID
FROM 
   PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET;

--Q3. Display all the distinct product categories in the dataset.
--Expected output: Product Category
SELECT DISTINCT Product_category
FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET;


--Q4. Display all the distinct gender values in the dataset.
--Expected output: Gender
SELECT DISTINCT Gender
FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET;

--Q5. Display all transactions where the Age is greater than 40.
--Expected output: All columns
SELECT *
 FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET
   WHERE Age>40;

--Q6. Display all transactions where the Price per Unit is between 100 and 500.
--Expected output: All columns
SELECT *
  FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET
   WHERE Price_per_Unit >= 100
   AND Price_per_Unit <= 500;

--Q7. Display all transactions where the Product Category is either 'Beauty' or 'Electronics'.
--Expected output: All columns  
SELECT *
  FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET
   WHERE Product_Category = 'Beauty'
   OR Product_Category = 'Electronics';

--Q8. Display all transactions where the Product Category is not 'Clothing'.
--Expected output: All columns
SELECT *
  FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET
  WHERE Product_Category <> 'Clothing';
  
--Q9. Display all transactions where the Quantity is greater than or equal to 3.
--Expected output: All columns
  SELECT *
  FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET
  WHERE QUANTITY >= 3;
   
--Q10. Count the total number of transactions.
--Expected output: Total_Transactions
SELECT COUNT (TRANSACTION_ID) AS Total_Transactions
  FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET;

--Q11. Find the average Age of customers.
--Expected output: Average_Age
SELECT AVG (Age) AS Average_Age
 FROM  PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET;

--Q12. Find the total quantity of products sold.
-- Expected output: Total_Quantity

SELECT SUM(QUANTITY) AS Total_Quantity
 FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET;

--Q13. Find the maximum Total Amount spent in a single transaction.
--Expected output: Max_Total_Amount
SELECT MAX(TOTAL_AMOUNT) AS Max_Total_Amount
  FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET;

--Q14. Find the minimum Price per Unit in the dataset.
--Expected output: Min_Price_per_Unit
SELECT MIN(PRICE_PER_UNIT) AS Min_Total_Amount
  FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET;
  
--Q15. Find the number of transactions per Product Category.
--Expected output: Product Category, Transaction_CountV
SELECT Product_Category,
COUNT(Transaction_ID) AS Transaction_Count
  FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET
  GROUP BY Product_Category;

--Q16. Find the total revenue (Total Amount) per gender.
--Expected output: Gender, Total_Revenue
SELECT Gender,
 SUM(TOTAL_AMOUNT) AS Total_Revenue
  FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET
  GROUP BY Gender;

--Q17. Find the average Price per Unit per product category.
--Expected output: Product Category, Average_Price
SELECT Product_Category,
  AVG(price_per_unit) AS Average_Price
   FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET
   GROUP BY Product_Category;

--Q18. Find the total revenue per product category where total revenue is greater than 10,000.
--Expected output: Product Category, Total_Revenue
SELECT Product_Category,
 SUM(TOTAL_AMOUNT) AS Total_Revenue
FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET
GROUP BY Product_Category
HAVING SUM(TOTAL_AMOUNT) > 10000;

--Q19. Find the average quantity per product category where the average is more than 2.
--Expected output: Product Category, Average_Quantity
SELECT Product_Category,
AVG(Quantity) AS Average_Quantity
FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET
GROUP BY Product_Category
HAVING AVG(Quantity) >2;


--Q20. Display a column called Spending_Level that shows 'High' if Total Amount > 1000, otherwise 'Low'.
--Expected output: Transaction ID, Total Amount, Spending_Level
SELECT TRANSACTION_ID, TOTAL_AMOUNT, 
  CASE 
    WHEN TOTAL_AMOUNT > 1000 THEN 'High'
    ELSE 'Low'
  END AS Spending_Level
FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET;

--Q21
 --Display a new column called Age_Group that labels customers as:
--• 'Youth' if Age < 30
--• 'Adult' if Age is between 30 and 59
--• 'Senior' if Age >= 60
--Expected output: Customer ID, Age, Age_Group
SELECT Customer_ID, Age,
       CASE
        WHEN Age < 30 THEN 'Youth'
        WHEN Age BETWEEN 30 AND 59 THEN 'Adult'
        WHEN Age >= 60 THEN 'Senior'
       END AS Age_Group
FROM PRACTICALONE.RETAIL_SALES.RETAIL_SALES_DATASET;
